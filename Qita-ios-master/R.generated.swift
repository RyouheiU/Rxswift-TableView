//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `cover`.
    static let cover = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover")
    
    /// `UIImage(named: "cover", bundle: ..., traitCollection: ...)`
    static func cover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ArticleViewCell`.
    static let articleViewCell = _R.nib._ArticleViewCell()
    
    /// `UINib(name: "ArticleViewCell", in: bundle)`
    static func articleViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `articleViewCell`.
    static let articleViewCell: Rswift.ReuseIdentifier<ArticleViewCell> = Rswift.ReuseIdentifier(identifier: "articleViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `ArticleViewController`.
    static let articleViewController = _R.storyboard.articleViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `QitaWebViewController`.
    static let qitaWebViewController = _R.storyboard.qitaWebViewController()
    
    /// `UIStoryboard(name: "ArticleViewController", bundle: ...)`
    static func articleViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.articleViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "QitaWebViewController", bundle: ...)`
    static func qitaWebViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qitaWebViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ArticleViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArticleViewCell
      
      let bundle = R.hostingBundle
      let identifier = "articleViewCell"
      let name = "ArticleViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try qitaWebViewController.validate()
      try articleViewController.validate()
    }
    
    struct articleViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ArticleViewController
      
      let articleViewController = StoryboardViewControllerResource<ArticleViewController>(identifier: "ArticleViewController")
      let bundle = R.hostingBundle
      let name = "ArticleViewController"
      
      func articleViewController(_: Void = ()) -> ArticleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.articleViewController().articleViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleViewController' could not be loaded from storyboard 'ArticleViewController' as 'ArticleViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct qitaWebViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = QitaWebViewController
      
      let bundle = R.hostingBundle
      let name = "QitaWebViewController"
      let qitaWebViewController = StoryboardViewControllerResource<QitaWebViewController>(identifier: "QitaWebViewController")
      
      func qitaWebViewController(_: Void = ()) -> QitaWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qitaWebViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.qitaWebViewController().qitaWebViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qitaWebViewController' could not be loaded from storyboard 'QitaWebViewController' as 'QitaWebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
