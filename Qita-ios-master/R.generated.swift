//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `cover`.
    static let cover = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover")
    
    /// `UIImage(named: "cover", bundle: ..., traitCollection: ...)`
    static func cover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `ArticleViewCell`.
    static let articleViewCell = _R.nib._ArticleViewCell()
    /// Nib `NewsViewCell`.
    static let newsViewCell = _R.nib._NewsViewCell()
    
    /// `UINib(name: "ArticleViewCell", in: bundle)`
    static func articleViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleViewCell)
    }
    
    /// `UINib(name: "NewsViewCell", in: bundle)`
    static func newsViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `articleViewCell`.
    static let articleViewCell: Rswift.ReuseIdentifier<ArticleViewCell> = Rswift.ReuseIdentifier(identifier: "articleViewCell")
    /// Reuse identifier `newsViewCell`.
    static let newsViewCell: Rswift.ReuseIdentifier<NewsViewCell> = Rswift.ReuseIdentifier(identifier: "newsViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `ArticleViewController`.
    static let articleViewController = _R.storyboard.articleViewController()
    /// Storyboard `LaunchDummyViewController`.
    static let launchDummyViewController = _R.storyboard.launchDummyViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginViewController`.
    static let loginViewController = _R.storyboard.loginViewController()
    /// Storyboard `NewsViewController`.
    static let newsViewController = _R.storyboard.newsViewController()
    /// Storyboard `QitaWebViewController`.
    static let qitaWebViewController = _R.storyboard.qitaWebViewController()
    /// Storyboard `TabBarController`.
    static let tabBarController = _R.storyboard.tabBarController()
    
    /// `UIStoryboard(name: "ArticleViewController", bundle: ...)`
    static func articleViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.articleViewController)
    }
    
    /// `UIStoryboard(name: "LaunchDummyViewController", bundle: ...)`
    static func launchDummyViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchDummyViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LoginViewController", bundle: ...)`
    static func loginViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginViewController)
    }
    
    /// `UIStoryboard(name: "NewsViewController", bundle: ...)`
    static func newsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsViewController)
    }
    
    /// `UIStoryboard(name: "QitaWebViewController", bundle: ...)`
    static func qitaWebViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qitaWebViewController)
    }
    
    /// `UIStoryboard(name: "TabBarController", bundle: ...)`
    static func tabBarController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBarController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ArticleViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ArticleViewCell
      
      let bundle = R.hostingBundle
      let identifier = "articleViewCell"
      let name = "ArticleViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NewsViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewsViewCell
      
      let bundle = R.hostingBundle
      let identifier = "newsViewCell"
      let name = "NewsViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NewsViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try qitaWebViewController.validate()
      try articleViewController.validate()
      try launchDummyViewController.validate()
      try tabBarController.validate()
      try newsViewController.validate()
      try loginViewController.validate()
    }
    
    struct articleViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ArticleViewController
      
      let articleViewController = StoryboardViewControllerResource<ArticleViewController>(identifier: "ArticleViewController")
      let bundle = R.hostingBundle
      let name = "ArticleViewController"
      
      func articleViewController(_: Void = ()) -> ArticleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.articleViewController().articleViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleViewController' could not be loaded from storyboard 'ArticleViewController' as 'ArticleViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchDummyViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchDummyViewController
      
      let bundle = R.hostingBundle
      let launchDummyViewController = StoryboardViewControllerResource<LaunchDummyViewController>(identifier: "LaunchDummyViewController")
      let name = "LaunchDummyViewController"
      
      func launchDummyViewController(_: Void = ()) -> LaunchDummyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchDummyViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.launchDummyViewController().launchDummyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchDummyViewController' could not be loaded from storyboard 'LaunchDummyViewController' as 'LaunchDummyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct loginViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "LoginViewController"
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.loginViewController().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginViewController' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct newsViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewsViewController
      
      let bundle = R.hostingBundle
      let name = "NewsViewController"
      let newsViewController = StoryboardViewControllerResource<NewsViewController>(identifier: "newsViewController")
      
      func newsViewController(_: Void = ()) -> NewsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.newsViewController().newsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsViewController' could not be loaded from storyboard 'NewsViewController' as 'NewsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qitaWebViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = QitaWebViewController
      
      let bundle = R.hostingBundle
      let name = "QitaWebViewController"
      let qitaWebViewController = StoryboardViewControllerResource<QitaWebViewController>(identifier: "QitaWebViewController")
      
      func qitaWebViewController(_: Void = ()) -> QitaWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qitaWebViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.qitaWebViewController().qitaWebViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qitaWebViewController' could not be loaded from storyboard 'QitaWebViewController' as 'QitaWebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabBarController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarController
      
      let bundle = R.hostingBundle
      let name = "TabBarController"
      let tabBarController = StoryboardViewControllerResource<TabBarController>(identifier: "TabBarController")
      
      func tabBarController(_: Void = ()) -> TabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarController)
      }
      
      static func validate() throws {
        if _R.storyboard.tabBarController().tabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarController' could not be loaded from storyboard 'TabBarController' as 'TabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
